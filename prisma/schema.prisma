generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
}

enum ProductType {
  CARTRIDGE
  PAINT
  TRANSFER
  GEL
}

enum FileType {
  MAIN
  GALLERY
  THUMBNAIL
}



model User {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String         @unique
  phone         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String
  roleId        Int?
  refreshTokens RefreshToken[]
  role          Role?          @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        RoleType @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("roles")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Box {
  id              Int              @id @default(autoincrement())
  boxTypeId       Int?
  name            String?          // Добавляем название коробки
  description     String?          // Описание коробки
  parentBoxId     Int?             // ID родительской коробки (для иерархии)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  boxType         BoxType?         @relation(fields: [boxTypeId], references: [id])
  parentBox       Box?             @relation("BoxHierarchy", fields: [parentBoxId], references: [id])
  childBoxes      Box[]            @relation("BoxHierarchy")
  inventoryItems  InventoryItem[]  // Переименовываем связь

  @@map("boxes")
}

model BoxType {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boxes     Box[]

  @@map("box_type")
}

model InventoryItem {
  id            Int       @id @default(autoincrement())
  name          String
  quantity      Int
  date          DateTime?
  boxId         Int?
  productId     Int
  purchasePrice Int       @default(0)
  status        String?
  notes         String?   // Дополнительные заметки
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  box           Box?      @relation(fields: [boxId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])

  @@map("inventory_items")
}

model Product {
  id             Int             @id @default(autoincrement())
  type           ProductType
  name           String
  brandId        Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  inventoryItems InventoryItem[] // Переименовываем связь
  brand          Brand           @relation(fields: [brandId], references: [id])
  files          File[]          // Связь с файлами

  @@map("products")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brands")
}

model File {
  id        Int       @id @default(autoincrement())
  filename  String    // Оригинальное имя файла
  s3Key     String    @unique // Ключ в S3 (путь к файлу)
  type      FileType  // Тип файла (MAIN, GALLERY, THUMBNAIL)
  order     Int       @default(0) // Порядок сортировки
  productId Int       // Связь с продуктом
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("files")
}
